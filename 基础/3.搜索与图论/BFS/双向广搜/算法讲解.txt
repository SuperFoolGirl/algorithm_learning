如果起点和终点状态都已知，就可以使用双向BFS
维护一个或两个队列，让起点和终点分别入队，同时开始搜
起点和终点拓展出来的点分别标记
一定会有一个时刻，两个队列同时拓展到一个点(不过在代码里的形式不是这两个点重合，但也很好理解)
此时就可以结束搜索

双向BFS作用就是提高效率
并不是空间换时间
时间和空间都下降了(大多数情况下空间会更小，小部分情况会相等)
空间下降是因为，想象一下，bfs越往下拓展出来的点越多，联想二叉树
双向BFS使得拓展出来的点减少了，因此空间也是下降的

用数组和哈希表来记录搜索情况
二者区别从之前的题目也能看出来
多维数组适用于搜索的点信息复杂的场景(也可以用哈希表，使结构体作键实现，不过要自己提供哈希函数)
哈希表适用于涉及字符串的场景

不过注意 只有起点终点都已知才能用
另外标记状态时往往涉及状态的压缩