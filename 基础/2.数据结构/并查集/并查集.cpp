// 1. 将两个集合合并
// 2. 询问两个集合是否在同一个集合中

// 基本原理：（用树的视角来看并查集）
// 每个集合用一棵树来表示，树根的编号就是整个集合的编号，没和节点存储它的父节点，p[x]表示x的父节点

// 1. 判断树根：p[x] == x
// 2. 求x的集合编号：一直往上走，走到树根 while (p[x] != x) x = p[x]; 实现上尾循环改为递归
// 3. 合并两个集合：把一个集合的根节点当作另一个集合的儿子 原本 p[x] = x,改成 p[x] = y;  // x的根节点变成y的儿子

// 题目：给定三种操作
// 1. M a b：将a和b所在的集合合并，若已经在同一个集合中，则不做任何操作
// 2. Q1 a b：询问a和b是否在同一个集合中
// 3. Q2 a：询问a所在集合的大小

// 输入格式：
// 第一行包含一个整数n（表示初始的n个数）、m（表示操作的数量）；接下来m行输出操作指令

// ------------------------------------------------------------------------------------------------
// 拓展：连通块问题，可以用并查集来解决

#include <algorithm>
#include <cstring>
#include <iostream>

using namespace std;

const int N = 1e5 + 10;
int n, m;
int p[N], sz[N]; // p数组存储每个节点的父节点，size数组存储每个集合的大小。只有根节点的size有意义

// 寻找根节点+路径压缩
int find(int x) {
    if (p[x] != x) {
        // 用递归的视角来看，确实能否实现路径压缩
        p[x] = find(p[x]);    // 路径压缩，将x的父节点直接指向根节点
    }
    return p[x];              // 返回根节点
}

int main() {
    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        p[i] = i;    // 初始化每个元素的父节点为它自己
        sz[i] = 1; // 初始化每个集合的大小为1
    }

    while (m--) {
        char op[5]; // cin输入流会忽略字符串中的空白字符，输入一个字符时，可以用字符串来输入
        int a, b;
        cin >> op;

        if (op[0] == 'M') {    // 合并操作
            cin >> a >> b;
            if (find(a) == find(b)) {
                continue;
            }
            sz[find(b)] += sz[find(a)];
            p[find(a)] = find(b); // 将a所在集合的根节点指向b所在集合的根节点
        } else if (op[1] == '1') {        // Q1
            cin >> a >> b;
            if (find(a) == find(b)) {
                cout << "Yes" << endl;    // 在同一个集合中
            } else {
                cout << "No" << endl;     // 不在同一个集合中
            }
        } else {
            cin >> a;                    // 查询集合大小
            cout << sz[find(a)] << endl; // 输出a所在集合的大小
        }
    }
}
